name: Fetch feeds & Deploy

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "17 5 * * *"   # daily 05:17 UTC
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Show repo tree (before)
        run: |
          echo "== repo tree =="
          ls -la
          echo "== bot =="
          ls -la bot || true
          echo "== data =="
          ls -la data || true
          echo "== site =="
          ls -la site || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (if requirements.txt exists)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # ---------- Fetch & Process Content ----------
      - name: Fetch feeds
        run: |
          if [ -f bot/fetch_from_feeds.py ]; then
            echo "Running bot/fetch_from_feeds.py"
            python bot/fetch_from_feeds.py || true
          elif [ -f bot/fetch.py ]; then
            echo "Running bot/fetch.py"
            python bot/fetch.py || true
          else
            echo "No fetch script found; skipping"
          fi

      - name: Summarize
        run: |
          if [ -f bot/summarize.py ]; then
            echo "Running bot/summarize.py"
            python bot/summarize.py || true
          else
            echo "bot/summarize.py not found; skipping"
          fi

      - name: Build site pages
        run: |
          if [ -f bot/site_builder.py ]; then
            echo "Running bot/site_builder.py"
            python bot/site_builder.py || true
          else
            echo "bot/site_builder.py not found; skipping"
          fi

      - name: Build sources (JSON + embedded JS)
        run: |
          if [ -f bot/build_sources.py ]; then
            echo "Running bot/build_sources.py"
            python bot/build_sources.py || true
          else
            echo "bot/build_sources.py not found; skipping"
          fi

      - name: Show data after build
        run: |
          echo "== data/ after build =="
          ls -la data || true
          echo "== site/assets/ after build =="
          ls -la site/assets || true
          if [ -f data/sources.json ]; then
            python -c "import json, pathlib; p=pathlib.Path('data/sources.json'); j=json.loads(p.read_text(encoding='utf-8')); print('sources.json -> generated_at:', j.get('generated_at')); print('window_days:', j.get('window_days')); print('sources count:', len(j.get('sources', [])))"
          else
            echo '❌ data/sources.json not found'
          fi

      # ---------- Inject Menu & Support Message ----------
      - name: Inject Sources menu & support note
        run: |
          idx="site/index.html"
          sd="site/assets/sources_data.js"
          ns="site/assets/nav-sources.js"
          th="site/assets/thanks.js"

          if [ -f "$idx" ]; then
            echo "Injecting scripts into index.html"

            # Embedded sources data
            if [ -f "$sd" ] && ! grep -qi "assets/sources_data.js" "$idx"; then
              if grep -qi "</body>" "$idx"; then
                sed -i 's#</body>#  <script src="assets/sources_data.js"></script>\n</body>#I' "$idx"
              elif grep -qi "</head>" "$idx"; then
                sed -i 's#</head>#  <script src="assets/sources_data.js"></script>\n</head>#I' "$idx"
              else
                printf '\n<script src="assets/sources_data.js"></script>\n' >> "$idx"
              fi
            fi

            # Add “Sources” menu item
            if [ -f "$ns" ] && ! grep -qi "assets/nav-sources.js" "$idx"; then
              if grep -qi "</body>" "$idx"; then
                sed -i 's#</body>#  <script src="assets/nav-sources.js" defer></script>\n</body>#I' "$idx"
              elif grep -qi "</head>" "$idx"; then
                sed -i 's#</head>#  <script src="assets/nav-sources.js" defer></script>\n</head>#I' "$idx"
              else
                printf '\n<script src="assets/nav-sources.js" defer></script>\n' >> "$idx"
              fi
              echo "✅ Injected nav-sources.js"
            fi

            # Runtime support note (Venmo + Email)
            if [ -f "$th" ] && ! grep -qi "assets/thanks.js" "$idx"; then
              if grep -qi "</body>" "$idx"; then
                sed -i 's#</body>#  <script src="assets/thanks.js" defer></script>\n</body>#I' "$idx"
              elif grep -qi "</head>" "$idx"; then
                sed -i 's#</head>#  <script src="assets/thanks.js" defer></script>\n</head>#I' "$idx"
              else
                printf '\n<script src="assets/thanks.js" defer></script>\n' >> "$idx"
              fi
              echo "✅ Injected thanks.js (support note)"
            fi
          else
            echo "site/index.html not found; skipping injections"
          fi

      # ---------- Package Site + Data for Pages ----------
      - name: Build public/ bundle (site + data)
        run: |
          rm -rf public
          mkdir -p public
          if [ -d site ]; then cp -r site/* public/; fi
          if [ -d data ]; then mkdir -p public/data && cp -r data/* public/data/; fi
          echo "== public/ bundle =="
          find public -maxdepth 2 -type f | sort

      - uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - id: deploy
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "### ✅ Deployed to GitHub Pages" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- URL: ${{ steps.deploy.outputs.page_url }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Sources page: ${{ steps.deploy.outputs.page_url }}sources.html" >> "$GITHUB_STEP_SUMMARY"
          echo "- Data JSON: ${{ steps.deploy.outputs.page_url }}data/sources.json" >> "$GITHUB_STEP_SUMMARY"
          echo "- Support note injected (Venmo + Email)." >> "$GITHUB_STEP_SUMMARY"
